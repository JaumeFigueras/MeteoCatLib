#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from .weather_station import WeatherStation
from .weather_station import WeatherStationStatus
import datetime
import dateutil.parser


def get_weather_stations(db_session, active_stations=False, active_on_date=datetime.datetime.utcnow()):
    """
    Get a list of all the weather station objects that meet the conditions described by the parameters

    :param db_session: Database session that is generated by SQLAlchemy ORM
    :type db_session: sqlalchemy.orm.Session
    :param active_stations: Sets if the list include all the weather stations or only that are in an active status at
    the given date
    :type active_stations: bool
    :param active_on_date: Sets the date when the station has to be in an active status
    :type active_on_date: Union[datetime, str]
    :return: List with all the weather stations that meet the search parameters
    :Rtype: list[WeatherStation]
    """
    if not active_stations:
        return db_session.query(WeatherStation)\
            .all()
    else:
        if type(active_on_date) is str:
            active_on_date = dateutil.parser.parse(active_on_date)
        # noinspection PyComparisonWithNone, PyPep8
        return db_session.query(WeatherStation)\
            .join(WeatherStationStatus.station)\
            .filter((WeatherStationStatus.code == 2) &
                    (WeatherStationStatus.from_date <= active_on_date) &
                    (WeatherStationStatus.to_date == None))\
            .all()  # noqa: E711
